name: main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  main:
    runs-on: windows-latest

    steps:

    - name: Cache ACE Installer
      id: cache-ace
      uses: actions/cache@v2
      with:
        path: ace.exe
        key: ace

    - name: Download ACE
      if: steps.cache-ace.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        $ProgressPreference = 'SilentlyContinue'
        irm ${{ secrets.ACE_URI }} -outfile ace.exe
        $ProgressPreference = 'Continue'

    - name: Show data sources before ACE
      shell: pwsh
      run: (New-Object system.data.oledb.oledbenumerator).GetElements().SOURCES_NAME

    - name: Install ACE
      shell: pwsh
      run: Start-Process .\ace.exe -Wait -ArgumentList "/quiet /passive /norestart"
        
    - name: Show data sources after ACE
      shell: pwsh
      run: (New-Object system.data.oledb.oledbenumerator).GetElements().SOURCES_NAME

    # Setting up required powershell modules
    - name: Set required PowerShell modules
      id: psmodulecache
      uses: potatoqualitee/psmodulecache@v1
      with:
        modules-to-cache: ImportExcel
    
      # Setting up the powershell module cache
    - name: Setup PowerShell module cache
      id: cacher
      uses: actions/cache@v2
      with:
        path: ${{ steps.psmodulecache.outputs.modulepath }}
        key: ${{ steps.psmodulecache.outputs.keygen }}
      
      # Installing the required powershell module, if not cached
    - name: Install required PowerShell modules
      if: steps.cacher.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

    - name: Try and run the Examples.ps1
      shell: pwsh
      run: |
        Import-Module ImportExcel
        cd (split-path (get-module ImportExcel).path -parent)
        cd .\examples\InvokeExcelQuery
        .\Examples.ps1
